x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
minu <- sum(x*w) / sum(w)
final <- sum(w*(x-minu)^2)
c(minu, final)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
regr_line <- lm(y ~ x + 0)
coef(regr_line)
data(mtcars)
head(mtcars)
regr_line(mpg~wt, mtcars)
regr_line <- lm(mpg~wt, mtcars)
coef(regr_line)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit<-lm(y~x)
fit
est<-predict(fit,data.frame(x))
est
summary(fit)
dataset(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
fit <- lm(y~x)
summary(fit)
predict(fit,data.frame(x=mean(x)), interval="confidence")
predict(fit_car, newdata = data.frame(x = 3), interval = ("prediction"))
fit_car2 <- lm(y ~ I(x/2))
sumCoef2 <- coef(summary(fit_car2))
(sumCoef2[2,1] + c(-1, 1) * qt(.975, df = fit_car2$df) * sumCoef2[2, 2])
sumCoef2
install.packages("devtools")
devtools::install_github("jhudsl/collegeIncome")
library(collegeIncome)
data(college)
devtools::install_github("jhudsl/matahari")
library(matahari)
devtools::install_github("jhudsl/collegeIncome")
library(collegeIncome)
data(college)
devtools::install_github("jhudsl/matahari")
library(matahari)
dance_start(value = FALSE, contents = FALSE)
head(college)
fit <- lm(perc_employed~major_category,college)
summary(fit)
resid(fit)
plot(resid(fit))
dance_save("~/Desktop/college_major_analysis.rds")
dance_save("~/Desktop/college_major_analysis.rds")
anova(fit)
set.seed(seed)
temp <- rnorm(100)
# Point A
x1 <- (temp + rnorm(100))/sqrt(2)
x2 <- (temp + rnorm(100))/sqrt(2)
x3 <- rnorm(100)
# Function to simulate regression of y on 2 variables.
f <- function(k){
# Point B
y <- x1 + x2 + x3 + .3*rnorm(100)
set.seed(100)
temp <- rnorm(100)
# Point A
x1 <- (temp + rnorm(100))/sqrt(2)
x2 <- (temp + rnorm(100))/sqrt(2)
x3 <- rnorm(100)
# Function to simulate regression of y on 2 variables.
f <- function(k){
# Point B
y <- x1 + x2 + x3 + .3*rnorm(100)
y
x1
coff(x1)
coef(x1)
install.packages("kernlab")
library(kernlab)
head(spam)
install.packages("caret")
library(caret)
install.packages("caret")
library(caret)
sessioninfo()
sessionInfo()
install.packages("caret")
library(caret)
trainingurl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testurl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
setwd("C:/Users/s.maramreddy/OneDrive - Accenture/Personal/R/Machine Lang/")
download.file(trainingurl, "trngfiledwd.csv")
download.file(testurl, "tstfiledwd.csv")
trngfile <- read.csv("trngfiledwd.csv",na.strings=c("NA","#DIV/0!", ""))
testfile <- read.csv("tstfiledwd.csv",na.strings=c("NA","#DIV/0!", ""))
trngfile<-trngfile[,colSums(is.na(trngfile)) == 0]
testfile <-testfile[,colSums(is.na(testfile)) == 0]
trngfile  <-trngfile[,-c(1:7)]
testfile <-testfile[,-c(1:7)]
cvalind <- createDataPartition(y=trngfile$classe, p=0.7, list=FALSE)
cvaltrngfile <- trngfile[cvalind,]
cvaltestfile <- trngfile[-cvalind,]
fit1 <- train(classe~., data=cvaltrngfile, method="gbm")
ctrl = trainControl(method='cv',number=5,repeats=2,returnResamp='none')
fit1 <- train(classe~., data=cvaltrngfile, method="gbm",trControl=ctrl)
ctrl = trainControl(method='cv',number=5,repeats=2,returnResamp='none')
fit2 <- train(classe~., data=cvaltrngfile, method="rf",trControl=ctrl)
install.packages("caret")
library(caret)
trainingurl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testurl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
setwd("C:/Users/s.maramreddy/OneDrive - Accenture/Personal/R/Machine Lang/")
download.file(trainingurl, "trngfiledwd.csv")
download.file(testurl, "tstfiledwd.csv")
trngfile <- read.csv("trngfiledwd.csv",na.strings=c("NA","#DIV/0!", ""))
testfile <- read.csv("tstfiledwd.csv",na.strings=c("NA","#DIV/0!", ""))
trngfile<-trngfile[,colSums(is.na(trngfile)) == 0]
testfile <-testfile[,colSums(is.na(testfile)) == 0]
trngfile  <-trngfile[,-c(1:7)]
testfile <-testfile[,-c(1:7)]
cvalind <- createDataPartition(y=trngfile$classe, p=0.7, list=FALSE)
cvaltrngfile <- trngfile[cvalind,]
cvaltestfile <- trngfile[-cvalind,]
ctrl = trainControl(method='cv',number=5,repeats=2,returnResamp='none')
fit1 <- train(classe~., data=cvaltrngfile, method="gbm",trControl=ctrl)
pred <- predict(fit1, cvaltestfile, type="class")
confusionMatrix(pred, cvaltestfile$classe)
fit2 <- train(classe~., data=cvaltrngfile, method="rf",trControl=ctrl)
pred <- predict(fit1, cvaltestfile)
confusionMatrix(pred, cvaltestfile$classe)
fit2 <- train(classe~., data=cvaltrngfile, method="rf",trControl=ctrl)
fit2
cvalind <- createDataPartition(y=trngfile$classe, p=0.3, list=FALSE)
cvaltrngfile <- trngfile[cvalind,]
cvaltestfile <- trngfile[-cvalind,]
ctrl = trainControl(method='cv',number=5,repeats=2,returnResamp='none')
fit1 <- train(classe~., data=cvaltrngfile, method="gbm",trControl=ctrl)
pred <- predict(fit1, cvaltestfile, type="class")
confusionMatrix(pred, cvaltestfile$classe)
fit2 <- train(classe~., data=cvaltrngfile, method="rf",trControl=ctrl)
pred <- predict(fit1, cvaltestfile)
confusionMatrix(pred, cvaltestfile$classe)
pred2 <- predict(fit2, cvaltestfile, type="class")
confusionMatrix(pred2, cvaltestfile$classe)
pred2 <- predict(fit2, cvaltestfile)
confusionMatrix(pred2, cvaltestfile$classe)
predtest <- predict(pred2, testfile)
confusionMatrix(predtest, testfile$classe)
predtest <- predict(fit2, testfile)
confusionMatrix(predtest, testfile$classe)
predtest <- predict(fit2, testfile, type="class")
predtest <- predict(fit2, testfile)
finalresult <- as.character(predtest)
finalresult
